version: "3.8"

services:

  zookeeper-1:
    image: confluentinc/cp-zookeeper:6.2.0
    ports:
      - '22181:2181'
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
    - eda-network

  kafka1:
    image: confluentinc/cp-kafka:6.2.0
    ports:
      - '19092:9092'
    depends_on:
      - zookeeper-1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:19092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    networks:
    - eda-network

  kafka2:
    image: confluentinc/cp-kafka:6.2.0
    ports:
      - '19093:9093'
    depends_on:
      - zookeeper-1
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9093,EXTERNAL://localhost:19093
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    networks:
    - eda-network

  kafka3:
    image: confluentinc/cp-kafka:6.2.0
    ports:
      - '19094:9094'
    depends_on:
      - zookeeper-1
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9094,EXTERNAL://localhost:19094
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    networks:
    - eda-network

  redis-server:
    image: redis:6.2.6-alpine
    ports: 
      - "6379:6379"
    networks:
    - eda-network

  cassandra-node-0:
    image: cassandra
    environment:
      - CASSANDRA_SEEDS=cassandra-node-0
      - CASSANDRA_CLUSTER_NAME=MyCluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_BROADCAST_RPC_ADDRESS=localhost
      - CASSANDRA_RPC_ADDRESS=0.0.0.0
      - MAX_HEAP_SIZE=1G
      - HEAP_NEWSIZE=400M
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    ports:
      - "7000:7000"    # 노드간 클러스터 내부 통신
      - "7001:7001"    # 노드간 보안 통신에 사용
      - "9042:9042"    # CQL 클라이언트와 연결
    networks:
      - eda-network
    volumes:
      - cassandra-node-0-data:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 80s

  # cassandra-node-1:
  #   image: cassandra
  #   environment:
  #     - CASSANDRA_SEEDS=cassandra-node-0
  #     - CASSANDRA_CLUSTER_NAME=MyCluster
  #     - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
  #     - CASSANDRA_DC=datacenter1
  #     - CASSANDRA_BROADCAST_RPC_ADDRESS=localhost
  #     - CASSANDRA_RPC_ADDRESS=0.0.0.0
  #     - MAX_HEAP_SIZE=1G
  #     - HEAP_NEWSIZE=400M
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 2G
  #       reservations:
  #         memory: 1G
  #   ports:
  #     - "17000:7000"    # 노드간 클러스터 내부 통신
  #     - "17001:7001"    # 노드간 보안 통신에 사용
  #     - "19042:9042"    # CQL 클라이언트와 연결
  #   networks:
  #     - eda-network
  #   volumes:
  #     - cassandra-node-0-data:/var/lib/cassandra
  # cassandra-node-2:
  #   image: cassandra
  #   environment:
  #     - CASSANDRA_SEEDS=cassandra-node-0
  #     - CASSANDRA_CLUSTER_NAME=MyCluster
  #     - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
  #     - CASSANDRA_DC=datacenter1
  #     - CASSANDRA_BROADCAST_RPC_ADDRESS=localhost
  #     - CASSANDRA_RPC_ADDRESS=0.0.0.0
  #     - MAX_HEAP_SIZE=1G
  #     - HEAP_NEWSIZE=400M
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 2G
  #       reservations:
  #         memory: 1G
  #   ports:
  #     - "27000:7000"    # 노드간 클러스터 내부 통신
  #     - "27001:7001"    # 노드간 보안 통신에 사용
  #     - "29042:9042"    # CQL 클라이언트와 연결
  #   networks:
  #     - eda-network
  #   volumes:
  #     - cassandra-node-0-data:/var/lib/cassandra
  
  mysql-server:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=1234
      - MYSQL_DATABASE=my_db
    ports:
      - "3306:3306"
    networks:
        - eda-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p1234"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s

  member-service:
    build:
      context: ./MemberService
      dockerfile: Dockerfile
    container_name: member-service
    # image: member-service
    ports:
      - "8081:8080"
    depends_on:
      mysql-server:
        condition: service_healthy
    environment:
      - DB_HOST=mysql-server
      - DB_PORT=3306
      - DB_DATABASE=my_db
      - DB_ROOT_ID=root
      - DB_ROOT_PW=1234
    networks:
      - eda-network

  payment-service:
    build:
      context: ./PaymentService
      dockerfile: Dockerfile
    container_name: payment-service
    # image: payment-service
    ports:
      - "8082:8080"
    depends_on:
      mysql-server:
        condition: service_healthy
    environment:
      - DB_HOST=mysql-server
      - DB_PORT=3306
      - DB_DATABASE=my_db
      - DB_ROOT_ID=root
      - DB_ROOT_PW=1234
    networks:
      - eda-network

  delivery-service:
    build:
      context: ./DeliveryService
      dockerfile: Dockerfile
    container_name: delivery-service
    # image: delivery-service
    ports:
      - "8083:8080"
    depends_on:
      mysql-server:
        condition: service_healthy
    environment:
      - DB_HOST=mysql-server
      - DB_PORT=3306
      - DB_DATABASE=my_db
      - DB_ROOT_ID=root
      - DB_ROOT_PW=1234
    networks:
      - eda-network

  search-service:
    build:
      context: ./SearchService
      dockerfile: Dockerfile
    container_name: search-service
    # image: search-service
    ports: 
      - "8084:8080"
    depends_on: 
      - redis-server
    environment:
      - REDIS_HOST=redis-server
      - REDIS_PORT=6379
    networks:
      - eda-network

  catalog-service:
    build:
      context: ./CatalogService
      dockerfile: Dockerfile
    container_name: catalog-service
    # image: catalog-service
    ports:
      - "8085:8080"
    depends_on: 
      cassandra-node-0:
        condition: service_healthy
      mysql-server:
        condition: service_healthy
    environment:
      - DB_HOST=mysql-server
      - DB_PORT=3306
      - DB_DATABASE=my_db
      - DB_ROOT_ID=root
      - DB_ROOT_PW=1234
      - CASSAN_KEYSPACE=catalog
      - CASSAN_DATACENTER=datacenter1
      - CASSAN_CONTACT_POINTS=cassandra-node-0
      - CASSAN_PORT=9042
    networks:
      - eda-network
  
  order-service:
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    container_name: order-service
    # image: order-service
    ports:
      - "8086:8080"
    depends_on:
      mysql-server:
        condition: service_healthy
    environment:
      - DB_HOST=mysql-server
      - DB_PORT=3306
      - DB_DATABASE=my_db
      - DB_ROOT_ID=root
      - DB_ROOT_PW=1234
    networks:
      - eda-network

networks:
  eda-network:
    driver: bridge
volumes:
  cassandra-node-0-data: